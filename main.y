%{
    int yylex();
    int yyerror();
    #include <stdio.h>
%}

%token TKN_INTEGER TKN_DOUBLE TKN_FLOAT TKN_VAR_NAME TKN_EQUAL TKN_INTEGER_NUMBER TKN_DOUBLE_NUMBER TKN_FLOAT_NUMBER TKN_SEMICOLON TKN_ERROR
%token TKN_ADD TKN_SUB TKN_MULTIPLICATION TKN_DIVISION TKN_LEFT_PARANTHESIS TKN_RIGHT_PARANTHESIS
%token TKN_IF TKN_WHILE TKN_LEFT_CURLY TKN_RIGHT_CURLY TKN_ELSE
%token TKN_IS_EQUAL TKN_IS_NOT_EQUAL TKN_IS_LOWER TKN_IS_HIGHER TKN_IS_LOWER_OR_EQUAL TKN_IS_HIGHER_OR_EQUAL
%token TKN_DOUBLE_QUOTE TKN_SINGLE_QUOTE TKN_PROPOSITION TKN_COMMA TKN_SPECIFIER
%start START
%left  TKN_ADD TKN_SUB
%left  TKN_MULTIPLICATION TKN_DIVISION

%%
    START : S
        | S START
        ;
    S : DECLARE_VAR {printf("Passed!\n");}
        | OPERATION TKN_SEMICOLON {printf("Passed!\n");}
        | IF {printf("Passed!\n");}
        | WHILE {printf("Passed!\n");}
        ;
    DECLARE_VAR : TKN_INTEGER TKN_VAR_NAME TKN_EQUAL OPERATION TKN_SEMICOLON
        | TKN_DOUBLE TKN_VAR_NAME TKN_EQUAL OPERATION TKN_SEMICOLON
        | TKN_FLOAT TKN_VAR_NAME TKN_EQUAL OPERATION TKN_SEMICOLON
        | TKN_VAR_NAME TKN_EQUAL OPERATION TKN_SEMICOLON
        ;
    OPERATION : OPERATION TKN_ADD OPERATION
        | OPERATION TKN_SUB OPERATION
        | OPERATION TKN_DIVISION OPERATION
        | OPERATION TKN_MULTIPLICATION OPERATION
        | TKN_INTEGER_NUMBER
        | TKN_DOUBLE_NUMBER
        | TKN_FLOAT_NUMBER
        | TKN_VAR_NAME
        | TKN_LEFT_PARANTHESIS OPERATION TKN_RIGHT_PARANTHESIS
        ;
    IF : TKN_IF TKN_LEFT_PARANTHESIS OPERATION TKN_RIGHT_PARANTHESIS TKN_LEFT_CURLY S TKN_RIGHT_CURLY
        | TKN_IF TKN_LEFT_PARANTHESIS COMPARE TKN_RIGHT_PARANTHESIS TKN_LEFT_CURLY S TKN_RIGHT_CURLY
        | TKN_ELSE TKN_LEFT_CURLY S TKN_RIGHT_CURLY
        | TKN_ELSE IF
        ;
    WHILE : TKN_WHILE TKN_LEFT_PARANTHESIS OPERATION TKN_RIGHT_PARANTHESIS TKN_LEFT_CURLY S TKN_RIGHT_CURLY
        | TKN_WHILE TKN_LEFT_PARANTHESIS COMPARE TKN_RIGHT_PARANTHESIS TKN_LEFT_CURLY S TKN_RIGHT_CURLY
        ;
    COMPARE : OPERATION TKN_IS_EQUAL OPERATION
        | OPERATION TKN_IS_NOT_EQUAL OPERATION
        | OPERATION TKN_IS_LOWER OPERATION
        | OPERATION TKN_IS_HIGHER OPERATION
        | OPERATION TKN_IS_LOWER_OR_EQUAL OPERATION
        | OPERATION TKN_IS_HIGHER_OR_EQUAL OPERATION
        ;
    PRINTF : TKN_LEFT_PARANTHESIS TKN_PROPOSITION TKN_RIGHT_PARANTHESIS TKN_SEMICOLON
        ;
    SPECIFIER: TKN_SPECIFIER
        | TKN_SPECIFIER TKN_COMMA SPECIFIER
        ;
%%

int main()
{
    yyparse();
    return 0;
}

int yyerror(char* error)
{
    printf("Eroare: %s!\n", error);
    return 0;
}